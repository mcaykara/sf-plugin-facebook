apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "io.smartface.facebookandroid"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    signingConfigs {
        release{
            def signinPropertiesFile = new File('signing.properties')
            def Properties signingProperties = new Properties()
            signingProperties.load(new FileInputStream(signinPropertiesFile))

            storeFile new File(signingProperties["STORE_FILE"])
            keyAlias signingProperties["KEY_ALIAS"]
            storePassword signingProperties["STORE_PASSWORD"]
            keyPassword signingProperties["KEY_PASSWORD"]

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.google.android.gms:play-services:10.2.0'
    compile 'com.android.support:appcompat-v7:24.+'
    compile 'com.facebook.android:facebook-android-sdk:4.+'

}

task createPlugin(group: "Smartface", description: "Create plugin from this project.", dependsOn : "assembleRelease"){
    doLast{
        def PluginName = "SmartfacePlugin"
        if(project.hasProperty("pluginName")){
            PluginName = project.property("pluginName")
        }

        def pluginFileExists = new File("./${PluginName}.zip")
        pluginFileExists.exists() && pluginFileExists.delete()

        println("########## Building Smartface Plugin")

        def apk = null
        android.applicationVariants.all { variant ->
            if ( (variant.name).equals("release") ) {
                variant.outputs.each { output ->
                    apk = output.outputFile
                }
            }
        }

        exec{
            executable 'smfc'
            args "--task=generate_AndroidPluginZip","--path=.","--apkPath=${apk}"
        }
        println("########## Smartface Plugin Successfuly Builded.\n")

        def outputZipFile = new File("./output.zip")
        outputZipFile.exists() && outputZipFile.deleteOnExit()

        println("########## Completed.\n")
        println("########## Smartface Android Plugin Successfully Generated")

    }
}
